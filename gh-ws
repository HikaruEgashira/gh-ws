#!/usr/bin/env bash
set -e

# Function to find the git repository root
get_current_repo() {
    local current_dir="$(pwd)"
    local ghq_root="$HOME/ghq/github.com"
    
    # Check if current directory is under ghq
    if [[ "$current_dir" == "$ghq_root"* ]]; then
        # Extract repo path (remove ghq_root prefix and get first 2 path components)
        local relative_path="${current_dir#$ghq_root/}"
        local repo_path=$(echo "$relative_path" | cut -d'/' -f1-2)
        echo "$ghq_root/$repo_path"
    fi
}

# Function to get repository name for workspace filename
get_repo_name() {
    local repo_path="$1"
    basename "$repo_path"
}

# Function to get workspace path
get_workspace_path() {
    local repo_name="$1"
    local workspace_dir="$HOME/ghq/workspaces"
    mkdir -p "$workspace_dir"
    echo "$workspace_dir/$repo_name.code-workspace"
}

# Function to create workspace JSON
create_workspace() {
    local worktrees=("$@")
    local workspace_json='{"folders":['
    local first=true
    
    for worktree in "${worktrees[@]}"; do
        if [ "$first" = true ]; then
            first=false
        else
            workspace_json+=','
        fi
        workspace_json+="{\"path\":\"$worktree\"}"
    done
    
    workspace_json+=']}'
    echo "$workspace_json"
}

if [ -z "$1" ] || [ "$1" == "-h" ] || [ "$1" == "--help" ]; then
    echo "Usage:"
    echo "  gh ws               ... Generate workspace and open in VSCode"
    echo "  gh ws init          ... Generate workspace from git worktrees"
    echo "  gh ws init <name>   ... Initialize new repository with workspace"
    echo "  gh ws list          ... List existing workspaces"
    echo "  gh ws remove        ... Remove workspace (interactive selection)"
    echo "  gh ws -- <command>  ... Search via fzf and run <command> in the selected workspace directory"
    echo "  gh ws <command>     ... Search via fzf and run <command> with selected workspace as argument"
    exit 0

# gh ws list
elif [ "$1" == "list" ]; then
    workspace_dir="$HOME/ghq/workspaces"
    if [ -d "$workspace_dir" ]; then
        echo "Available workspaces:"
        for workspace in "$workspace_dir"/*.code-workspace; do
            if [ -f "$workspace" ]; then
                basename "$workspace" .code-workspace
            fi
        done 2>/dev/null || echo "No workspaces found"
    else
        echo "No workspaces directory found"
    fi

# gh ws init
elif [ "$1" == "init" ]; then
    # gh ws init <name> - create new repository with workspace
    if [ -n "$2" ]; then
        repo_name="$2"
        repo_path="$HOME/ghq/github.com/$(gh api user --jq .login)/$repo_name"
        
        # Create directory structure
        mkdir -p "$repo_path"
        cd "$repo_path"
        
        # Initialize git repository
        git init
        echo "# $repo_name" > README.md
        git add README.md
        git commit -m "Initial commit"
        
        # Create and push to GitHub
        gh repo create "$repo_name" --public --source . --push
        
        # Create develop worktree
        develop_path="$repo_path-develop"
        git worktree add "$develop_path" -b develop
        
        # Create workspace
        worktrees=("$repo_path" "$develop_path")
        workspace_path=$(get_workspace_path "$repo_name")
        workspace_json=$(create_workspace "${worktrees[@]}")
        echo "$workspace_json" > "$workspace_path"
        
        echo "Repository and workspace initialized:"
        echo "  Main: $repo_path"
        echo "  Develop: $develop_path"
        echo "  Workspace: $workspace_path"
        echo ""
        echo "Opening workspace in VSCode..."
        
        # Open VSCode
        if command -v code >/dev/null 2>&1; then
            code "$workspace_path"
        else
            echo "VSCode (code command) not found. Please install VSCode or add it to PATH."
        fi
        
    # gh ws init - generate workspace from existing worktrees
    else
        if current_repo=$(get_current_repo); then
            echo "Using current repository: $current_repo"
            
            # Get worktrees
            temp_file=$(mktemp)
            (cd "$current_repo" && git worktree list --porcelain 2>/dev/null | grep "^worktree " | sed 's/^worktree //' >> "$temp_file") || true
            
            if [ ! -s "$temp_file" ]; then
                echo "No worktrees found"
                rm "$temp_file"
                exit 0
            fi
            
            # Read worktrees into array
            worktrees=()
            while IFS= read -r line; do
                worktrees+=("$line")
            done < "$temp_file"
            rm "$temp_file"
            
            # Create workspace
            repo_name=$(get_repo_name "$current_repo")
            workspace_path=$(get_workspace_path "$repo_name")
            workspace_json=$(create_workspace "${worktrees[@]}")
            
            echo "$workspace_json" > "$workspace_path"
            echo "Workspace created: $workspace_path"
        else
            echo "Error: Not in a git repository"
            exit 1
        fi
    fi

# gh ws remove
elif [ "$1" == "remove" ] || [ "$1" == "rm" ]; then
    workspace_dir="$HOME/ghq/workspaces"
    if [ -d "$workspace_dir" ]; then
        temp_file=$(mktemp)
        for workspace in "$workspace_dir"/*.code-workspace; do
            if [ -f "$workspace" ]; then
                echo "$workspace" >> "$temp_file"
            fi
        done 2>/dev/null || true
        
        if [ ! -s "$temp_file" ]; then
            echo "No workspaces found"
            rm "$temp_file"
            exit 0
        fi
        
        selected_workspace=$(cat "$temp_file" | fzf --prompt="Select workspace to remove: " || true)
        rm "$temp_file"
        
        if [ -n "$selected_workspace" ]; then
            echo "Removing workspace: $selected_workspace"
            rm "$selected_workspace"
            echo "Workspace removed successfully!"
        fi
    else
        echo "No workspaces directory found"
        exit 1
    fi

# gh ws -- <command>
elif [ "$1" == "--" ]; then
    shift  # Remove the "--" from arguments
    workspace_dir="$HOME/ghq/workspaces"
    if [ -d "$workspace_dir" ]; then
        temp_file=$(mktemp)
        for workspace in "$workspace_dir"/*.code-workspace; do
            if [ -f "$workspace" ]; then
                echo "$workspace" >> "$temp_file"
            fi
        done 2>/dev/null || true
        
        if [ ! -s "$temp_file" ]; then
            echo "No workspaces found"
            rm "$temp_file"
            exit 0
        fi
        
        selected_workspace=$(cat "$temp_file" | fzf --prompt="Select workspace: " || true)
        rm "$temp_file"
        
        if [ -n "$selected_workspace" ]; then
            workspace_dir=$(dirname "$selected_workspace")
            cd "$workspace_dir"
            exec "$@"
        fi
    else
        echo "No workspaces directory found"
        exit 1
    fi

# gh ws <command>
elif [ "$1" != "init" ] && [ "$1" != "list" ] && [ "$1" != "remove" ] && [ "$1" != "rm" ]; then
    workspace_dir="$HOME/ghq/workspaces"
    if [ -d "$workspace_dir" ]; then
        temp_file=$(mktemp)
        for workspace in "$workspace_dir"/*.code-workspace; do
            if [ -f "$workspace" ]; then
                echo "$workspace" >> "$temp_file"
            fi
        done 2>/dev/null || true
        
        if [ ! -s "$temp_file" ]; then
            echo "No workspaces found"
            rm "$temp_file"
            exit 0
        fi
        
        selected_workspace=$(cat "$temp_file" | fzf --prompt="Select workspace: " || true)
        rm "$temp_file"
        
        if [ -n "$selected_workspace" ]; then
            exec "$@" "$selected_workspace"
        fi
    else
        echo "No workspaces directory found"
        exit 1
    fi

# gh ws (default: init and open)
else
    if current_repo=$(get_current_repo); then
        repo_name=$(get_repo_name "$current_repo")
        workspace_path=$(get_workspace_path "$repo_name")
        
        # Check if workspace exists
        if [ -f "$workspace_path" ]; then
            echo "Opening existing workspace: $workspace_path"
        else
            echo "Creating new workspace for: $current_repo"
            
            # Get worktrees
            temp_file=$(mktemp)
            (cd "$current_repo" && git worktree list --porcelain 2>/dev/null | grep "^worktree " | sed 's/^worktree //' >> "$temp_file") || true
            
            if [ ! -s "$temp_file" ]; then
                echo "No worktrees found"
                rm "$temp_file"
                exit 0
            fi
            
            # Read worktrees into array
            worktrees=()
            while IFS= read -r line; do
                worktrees+=("$line")
            done < "$temp_file"
            rm "$temp_file"
            
            # Create workspace
            workspace_json=$(create_workspace "${worktrees[@]}")
            echo "$workspace_json" > "$workspace_path"
            echo "Workspace created: $workspace_path"
        fi
        
        # Open VSCode
        if command -v code >/dev/null 2>&1; then
            code "$workspace_path"
        else
            echo "VSCode (code command) not found. Please install VSCode or add it to PATH."
        fi
    else
        echo "Error: Not in a git repository"
        exit 1
    fi
fi